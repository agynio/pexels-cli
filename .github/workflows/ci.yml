name: CI

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      PEXELS_TOKEN: ${{ secrets.PEXELS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Sanity
        run: echo "Workflow started on ${{ github.event_name }} for ${{ github.ref }}"
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Lint (fmt)
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Test
        run: cargo test --workspace --all-features -- --nocapture
      - name: Build release
        run: cargo build --release --workspace
      - name: E2E (mock server via tests)
        run: cargo test -p pexels --test integration_mock -- --nocapture
      - name: Live smoke - auth status
        if: ${{ env.PEXELS_TOKEN != '' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
        run: ./target/release/pexels auth status --timeout 20 --max-retries 3
      - name: Live smoke - photos curated
        if: ${{ env.PEXELS_TOKEN != '' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
        run: ./target/release/pexels photos curated --per-page 1 --fields photographer,alt --timeout 20 --max-retries 3
      - name: Live test - photos url/download
        if: ${{ env.PEXELS_TOKEN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          ID=$(./target/release/pexels photos search cat --per-page 1 --json --timeout 20 --max-retries 3 | python3 - <<'PY'
          import sys, json
          d=json.load(sys.stdin)
          print(d['data'][0]['id'])
PY
          )
          echo "ID=$ID"
          URL=$(./target/release/pexels photos url "$ID" --json --timeout 20 --max-retries 3 | python3 - <<'PY'
          import sys, json
          d=json.load(sys.stdin)
          assert isinstance(d['data'], str) and d['data'].startswith('http')
          print(d['data'])
PY
          )
          echo "URL=$URL"
          TMP=./tmp/test.jpg
          mkdir -p ./tmp
          OUT=$(./target/release/pexels photos download "$ID" "$TMP" --json --timeout 20 --max-retries 3)
          echo "$OUT"
          python3 - <<'PY'
          import sys, json, os
          d=json.loads(os.environ['OUT']) if 'OUT' in os.environ else json.loads(sys.argv[1])
          assert d['data']['bytes'] > 0
          assert os.path.exists(d['data']['path'])
PY
          "$OUT"
      - name: Live smoke - videos popular
        if: ${{ env.PEXELS_TOKEN != '' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
        run: ./target/release/pexels videos popular --per-page 1 --fields duration --timeout 20 --max-retries 3
      - name: Live smoke - collections featured
        if: ${{ env.PEXELS_TOKEN != '' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
        run: ./target/release/pexels collections featured --per-page 1 --fields title --timeout 20 --max-retries 3
