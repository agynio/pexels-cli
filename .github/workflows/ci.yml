name: CI

on:
  push:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      PEXELS_TOKEN: ${{ secrets.PEXELS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Format (check)
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build release
        run: cargo build --release

      - name: Run unit tests
        run: cargo test --all --release --verbose

      - name: Install yq
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          YQ_VER=v4.44.3
          sudo curl -L -o /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Live tests - photos download
        if: ${{ env.PEXELS_TOKEN != '' && (github.event_name == 'push' || github.event_name == 'pull_request') && github.repository_owner == 'agynio' }}
        shell: bash
        run: |
          set -e
          if [ "${RUNNER_OS:-}" = "Linux" ]; then
            umask 077
          fi

          # helper to run built binary as "pexels"
          pexels() { ./target/release/pexels "$@"; }

          # search to get an ID
          OUT_SEARCH=$(pexels photos search -q cat)
          ID=$(echo "$OUT_SEARCH" | yq -r '.data[0].id')
          echo "ID=$ID"

          # run download and capture JSON
          TMPDIR=$(mktemp -d)
          DEST="$TMPDIR/cat.jpg"
          OUT_DL=$(pexels photos download "$ID" "$DEST")
          echo "$OUT_DL" > download.json

          # compute absolute path for comparison
          ABS=$(python3 -c 'import pathlib,sys; print(pathlib.Path(sys.argv[1]).resolve())' "$DEST")
          export ABS
          echo "ABS=$ABS"

          echo 'Check: has("data") and has("meta")'
          yq -e 'has("data") and has("meta")' download.json

          echo 'Check: .data.path is string'
          yq -e '.data.path | type == "!!str"' download.json

          echo 'Check: .data.bytes is int and > 0'
          yq -e '.data.bytes | type == "!!int" and . > 0' download.json

          echo 'Check: .data.path equals absolute path'
          yq -e '.data.path == env(ABS)' download.json

          echo 'Check: file exists and is non-empty'
          [ -f "$ABS" ]
          [ -s "$ABS" ]

          # Ensure deterministic permissions on Linux; skip on non-Linux
          if [ "${RUNNER_OS:-}" = "Linux" ]; then
            chmod 600 "$ABS" || true
            PERM=$(stat -c '%a' "$ABS")
            echo "Linux mode=$PERM"
            [ "$PERM" = 600 ]
          else
            echo "Skipping mode check on RUNNER_OS=${RUNNER_OS:-unknown}"
          fi
